#!/usr/bin/perl
### before: #!@PERL@

use warnings;
use strict;

package RT::Flush::PagerDuty::Run;

BEGIN {
### after:     use lib qw(@RT_LIB_PATH@);
use lib '/opt/rt4/local/lib /opt/rt4/lib';
use RT;
RT::LoadConfig;
RT::Init;
}

use PagerDuty::Agent;
use RT::Interface::CLI qw(GetCurrentUser);
use RT::Ticket;

__PACKAGE__->run(@ARGV) unless caller;

sub run {
    my ($class, @args) = @_;

    RT->LoadConfig;
    RT->Init;
    my $current_user = GetCurrentUser();

    unless ( $current_user->Id ) {
        RT->Logger->error("No RT user found. Please consult your RT administrator.");
        exit(1);
    }

    my $spool_dir = RT->Config->Get('PagerDutySpoolDir');

    if (! defined $spool_dir) {
        RT::Logger->error("PagerDutySpoolDir is not set, nothing for me to do");
        return 0;
    }

    my $agent = PagerDuty::Agent->new(spool => $spool_dir);

    RT::Logger->info("Attempting to flush any PagerDuty notifications");
    my $results = $agent->flush;

    my $ticket = RT::Ticket->new($current_user);
    for my $submission (@{$results->{dedup_keys}}) {
        my $dedup_key = $submission->[0];
        my $result    = $submission->[1];

        (my $ticket_id = $dedup_key) =~ s/rt#//;
        $ticket->Load($ticket_id);

        my ($pretty_action, $txn_content);
        if ($result eq 'defer') {
            RT::Logger->info("PagerDuty notification for $dedup_key deferred again");
            $pretty_action = 'deferred';
            $txn_content = "Failed creating/updating incident in PagerDuty, deferred again";
        } elsif ($result eq 'submitted') {
            RT::Logger->info("PagerDuty notification for $dedup_key submitted");
            $pretty_action = 'submitted';
            $txn_content = "Succeeded in creating/updating incident in PagerDuty";
        } else {
            RT::Logger->info("PagerDuty notification for $dedup_key rejected: $result");
            $pretty_action = 'rejected';
            $txn_content = "Failed creating/updating incident in PagerDuty, rejected.";
        }

        # We need to give RT::Record::_NewTransaction a MIME object to have it
        # store our content for us.
        my $MIMEObj = MIME::Entity->build(
            Type    => "text/plain",
            Charset => "UTF-8",
            Data    => [ Encode::encode("UTF-8", $txn_content) ],
        );

        $ticket->_NewTransaction(
            Type     => 'PagerDuty',
            NewValue => $pretty_action,
            MIMEObj  => $MIMEObj,
        );
    }

    RT::Logger->info("Flush run of PagerDuty notifications finished");
}

__END__

=head1 NAME

rt-flush-pagerduty - flush any spooled submissions for PagerDuty from Request Tracker

=head1 SYNOPSIS

    rt-flush-pagerduty

=head1 DESCRIPTION

Flush any spooled submissions for PagerDuty. This should be run from cron as
a user which can read the Request Tracker configuration files and manage
files in the spool directory.

=head1 AUTHOR

Andrew Ruthven, Catalyst Cloud Ltd E<lt>puck@catalystcloud.nzE<gt>

=for html <p>All bugs should be reported via email to <a
href="mailto:bug-RT-Action-NotifyPagerDuty@rt.cpan.org">bug-RT-Action-NotifyPage
rDuty@rt.cpan.org</a>
or via the web at <a
href="http://rt.cpan.org/Public/Dist/Display.html?Name=RT-Action-NotifyPagerDuty
">rt.cpan.org</a>.</p>

=for text
    All bugs should be reported via email to
        bug-RT-Action-NotifyPagerDuty@rt.cpan.org
    or via the web at
        http://rt.cpan.org/Public/Dist/Display.html?Name=RT-Action-NotifyPagerDu
ty

=head1 LICENSE AND COPYRIGHT

This software is Copyright (c) 2019-2020 by Catalyst Cloud Ltd

This is free software, licensed under:

  The GNU General Public License, Version 2, June 1991

=cut

1;
